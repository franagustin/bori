create_prefix_table: >
  CREATE TABLE IF NOT EXISTS prefixes (
    server_id NUMERIC(20) PRIMARY KEY,
    prefix_list TEXT[]
  );
insert_prefix: INSERT INTO prefixes VALUES(%s, %s);
insert_prefix_returning: >
  INSERT INTO prefixes VALUES(%s, %s)
  RETURNING prefix_list;
select_prefixes: SELECT prefix_list FROM prefixes WHERE server_id = %s;
update_prefixes: >
  UPDATE prefixes
    SET prefix_list = %s
    WHERE server_id = %s;
create_prole_table: >
  CREATE TABLE IF NOT EXISTS persistent_roles (
    id SERIAL NOT NULL PRIMARY KEY,
    server_id NUMERIC(20) NOT NULL,
    member_list NUMERIC(20)[],
    role_id NUMERIC(20)
  );
select_server_proles: >
  SELECT role_id FROM persistent_roles WHERE server_id = %s;
select_filled_server_proles: >
  SELECT role_id, member_list FROM persistent_roles
  WHERE server_id = %s AND member_list <> '{}' AND member_list IS NOT NULL;
insert_prole: >
  INSERT INTO persistent_roles(server_id, member_list, role_id) 
  VALUES(%s, %s, %s);
get_members_prole: >
  SELECT member_list FROM persistent_roles
  WHERE server_id = %s AND role_id = %s;
update_prole: >
  UPDATE persistent_roles
    SET member_list = %s
    WHERE server_id = %s AND role_id = %s
    RETURNING member_list;
remove_prole: >
  DELETE FROM persistent_roles WHERE server_id = %s AND role_id = %s;
create_muted_table: >
  CREATE TABLE IF NOT EXISTS muted (
    id SERIAL NOT NULL PRIMARY KEY,
    server_id NUMERIC(20) NOT NULL,
    member_id NUMERIC(20) NOT NULL,
    end_time TIMESTAMP WITHOUT TIME ZONE NOT NULL
  );
insert_muted: >
  INSERT INTO muted(server_id, member_id, end_time) VALUES(%s, %s, %s);
update_muted: >
  UPDATE muted SET end_time = %s WHERE server_id = %s AND member_id = %s;
remove_muted: DELETE FROM muted WHERE server_id = %s AND member_id = %s;
select_muted: SELECT * FROM muted WHERE server_id = %s AND member_id = %s;
select_all_muted: SELECT * FROM muted WHERE server_id = %s;
create_democracy_table: >
  CREATE TABLE IF NOT EXISTS democracy (
    id SERIAL NOT NULL PRIMARY KEY,
    channel_id NUMERIC(20) NOT NULL,
    title VARCHAR(2000) NOT NULL,
    options TEXT[] NOT NULL,
    votes INTEGER[],
    voters json,
    active BOOLEAN NOT NULL DEFAULT TRUE
  );
create_poll: >
  INSERT INTO democracy(channel_id, title, options, votes, voters)
  VALUES(%s, %s, %s, %s, %s)
  RETURNING *;
update_poll: >
  UPDATE democracy
    SET votes = %s, voters = %s
    WHERE channel_id = %s AND active = TRUE;
select_active_poll: >
  SELECT * FROM democracy WHERE channel_id = %s AND active = TRUE;
close_active_poll: >
  UPDATE democracy
    SET active = FALSE
    WHERE channel_id = %s AND active = TRUE
    RETURNING *;
create_rrole_table: >
  CREATE TABLE IF NOT EXISTS rainbow_roles (
    id SERIAL NOT NULL PRIMARY KEY,
    role_id NUMERIC(20) NOT NULL,
    server_id NUMERIC(20) NOT NULL,
    colours INTEGER[] NOT NULL,
    interval INTEGER NOT NULL DEFAULT 5,
    last_edited TIMESTAMP
  );
insert_rrole: >
  INSERT INTO rainbow_roles(server_id, role_id, colours, interval, last_edited)
  VALUES(%s, %s, %s, %s, NOW());
update_rrole: >
  UPDATE rainbow_roles
  SET colours = %s, interval = %s
  WHERE server_id = %s AND role_id = %s;
remove_rrole: DELETE FROM rainbow_roles WHERE server_id = %s AND role_id = %s;
select_rrole_data: SELECT * FROM rainbow_roles WHERE server_id = %s;
select_rrole_id: SELECT role_id FROM rainbow_roles WHERE server_id = %s;
select_rrole_colours: >
  SELECT colours FROM rainbow_roles
  WHERE server_id = %s AND role_id = %s;
update_rrole_edited_time: >
  UPDATE rainbow_roles
  SET last_edited = %s
  WHERE server_id = %s AND role_id = %s;
